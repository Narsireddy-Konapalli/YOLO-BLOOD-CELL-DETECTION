# -*- coding: utf-8 -*-
"""BCCD.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1u0yWtejJxfu2FFZEqpf4dinIVxRKn4lo
"""

from google.colab import drive
drive.mount('/content/drive')

import os
from glob import glob
import pandas as pd
from functools import reduce
from xml.etree import ElementTree as et

xml_lst=glob('/content/drive/MyDrive/BCCD/Annotations/*.xml')

#extracting filename,size(width,height),object(name,xmin,xmax,ymin,ymax)
def extract_text(filename):
    tree=et.parse(filename)
    root=tree.getroot()
    image_name=root.find('filename').text
    width=root.find('size').find('width').text
    height=root.find('size').find('height').text
    objs=root.findall('object')
    parser=[]
    for obj in objs:
        name=obj.find('name').text
        bndbox=obj.find('bndbox')
        xmin=bndbox.find('xmin').text
        xmax=bndbox.find('xmax').text
        ymin=bndbox.find('ymin').text
        ymax=bndbox.find('ymax').text
        parser.append([image_name,width,height,name,xmin,xmax,ymin,ymax])
    return parser

parser_all=list(map(extract_text,xml_lst))

data=reduce(lambda x,y :x+y,parser_all)

df=pd.DataFrame(data,columns=['filename','width','height','name','xmin','xmax','ymin','ymax'])
df.head()

df['name'].value_counts()

cols=['width','height','xmin','xmax','ymin','ymax']
df[cols]=df[cols].astype(int)
df.info()

df['center_x']=((df['xmax']+df['xmin'])/2)/df['width']
df['center_y']=((df['ymax']+df['ymin'])/2)/df['height']
df['w']=(df['xmax']-df['xmin'])/df['width']
df['h']=(df['ymax']-df['ymin'])/df['height']

df.head()

images=df['filename'].unique()
img_df=pd.DataFrame(images,columns=['filename'])
img_train=tuple(img_df.sample(frac=0.8)['filename'])
img_test = tuple(img_df[~img_df['filename'].isin(img_train)]['filename'])

len(img_train),len(img_test)

train_df=df.query(f'filename in {img_train}')
test_df=df.query(f'filename in {img_test}')

test_df.head()

test_df['name'].value_counts()

def label_encoding(x):
    labels={'Platelets':0,
        'RBC':1,
        'WBC':2}
    return labels[x]

train_df['id']=train_df['name'].apply(label_encoding)
test_df['id']=test_df['name'].apply(label_encoding)

test_df.head()

from shutil import move

train_folder='/content/drive/MyDrive/BCCD/data/train'
test_folder='/content/drive/MyDrive/BCCD/data/test'
os.mkdir(train_folder)
os.mkdir(test_folder)

cols=['filename','id','center_x','center_y','w','h']
group_by_obj_train=train_df[cols].groupby('filename')
group_by_obj_test=test_df[cols].groupby('filename')

from itertools import groupby
def save_data(filename,folder_path,group_obj):
    src=os.path.join('/content/drive/MyDrive/BCCD/JPEGImages',filename)
    dst=os.path.join(folder_path,filename)
    move(src,dst)
    text_filename=os.path.join(folder_path,os.path.splitext(filename)[0]+'.txt')
    group_obj.get_group(filename).set_index('filename').to_csv(text_filename,sep=' ',index=False,header=False)

filename_series=pd.Series(group_by_obj_train.groups.keys())
filename_series.apply(save_data,args=(train_folder,group_by_obj_train))

filename_series_test=pd.Series(group_by_obj_test.groups.keys())
filename_series_test.apply(save_data,args=(test_folder,group_by_obj_test))

os.chdir('/content/drive/MyDrive/BCCD/data')

!git clone https://github.com/ultralytics/yolov5.git

os.chdir('/content/drive/MyDrive/BCCD/data/yolov5')
print(os.listdir())

!pip install -r /content/drive/MyDrive/BCCD/data/yolov5/requirements.txt

!python train.py --data /content/drive/MyDrive/BCCD/data/data.yaml --cfg yolov5s.yaml --batch-size 8 --name Model --epochs 50

!python export.py --weights /content/drive/MyDrive/BCCD/data/yolov5/runs/train/Model/weights/best.pt --include torchscript onnx

